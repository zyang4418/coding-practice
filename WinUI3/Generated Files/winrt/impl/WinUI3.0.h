// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#ifndef WINRT_WinUI3_0_H
#define WINRT_WinUI3_0_H
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Markup
{
    struct IXamlMetadataProvider;
}
WINRT_EXPORT namespace winrt::WinUI3
{
    struct IMainWindow;
    struct MainWindow;
    struct XamlMetaDataProvider;
}
namespace winrt::impl
{
    template <> struct category<winrt::WinUI3::IMainWindow>{ using type = interface_category; };
    template <> struct category<winrt::WinUI3::MainWindow>{ using type = class_category; };
    template <> struct category<winrt::WinUI3::XamlMetaDataProvider>{ using type = class_category; };
    template <> inline constexpr auto& name_v<winrt::WinUI3::MainWindow> = L"WinUI3.MainWindow";
    template <> inline constexpr auto& name_v<winrt::WinUI3::XamlMetaDataProvider> = L"WinUI3.XamlMetaDataProvider";
    template <> inline constexpr auto& name_v<winrt::WinUI3::IMainWindow> = L"WinUI3.IMainWindow";
    template <> inline constexpr guid guid_v<winrt::WinUI3::IMainWindow>{ 0x2A78A171,0x1C61,0x5A60,{ 0xA5,0x2A,0xBE,0x3A,0x04,0x96,0x84,0xCD } }; // 2A78A171-1C61-5A60-A52A-BE3A049684CD
    template <> struct default_interface<winrt::WinUI3::MainWindow>{ using type = winrt::WinUI3::IMainWindow; };
    template <> struct default_interface<winrt::WinUI3::XamlMetaDataProvider>{ using type = winrt::Microsoft::UI::Xaml::Markup::IXamlMetadataProvider; };
    template <> struct abi<winrt::WinUI3::IMainWindow>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_MyProperty(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MyProperty(int32_t) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_WinUI3_IMainWindow
    {
        [[nodiscard]] auto MyProperty() const;
        auto MyProperty(int32_t value) const;
    };
    template <> struct consume<winrt::WinUI3::IMainWindow>
    {
        template <typename D> using type = consume_WinUI3_IMainWindow<D>;
    };
}
#endif
